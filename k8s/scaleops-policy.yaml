apiVersion: scaleops.sh/v1alpha1
kind: Policy
metadata:
  name: nodejs-web-app-policy
  namespace: production
  labels:
    app: k8bit-test-nodejs-app
    environment: production
    managed-by: k8bit
    scaleops.sh/workload-type: nodejs
  annotations:
    k8bit.io/cold-start-protocol: "enabled"
    k8bit.io/generated-by: "k8bit-cli"
spec:
  # Target workload selector
  selector:
    matchLabels:
      app: k8bit-test-nodejs-app
  
  # Workload optimization settings for Node.js applications
  workload:
    type: "web-service"
    language: "nodejs"
    framework: "express"
    
  # Resource optimization settings
  resources:
    # CPU optimization for Node.js single-threaded nature
    cpu:
      # Enable CPU optimization with NodeJS-specific settings
      optimization: "enabled"
      # Target CPU utilization for efficient scaling
      targetUtilization: 70
      # Allow burst capacity for traffic spikes
      burstable: true
      # CPU headroom for Node.js event loop processing
      headroomPercentage: 20
      
    # Memory optimization for V8 heap management
    memory:
      optimization: "enabled"
      # Lower memory target due to V8 garbage collection
      targetUtilization: 75
      # Memory headroom for V8 heap expansion
      headroomPercentage: 25
      # Enable memory leak detection
      leakDetection: true
      
  # Scaling behavior optimized for web applications
  scaling:
    # Fast reaction for web traffic patterns
    reactionTime: "fast"
    
    # Scale up aggressively for traffic spikes
    scaleUp:
      # Quick response to load increases
      stabilizationWindowSeconds: 60
      # Aggressive scaling for web workloads
      maxScaleUpPercent: 100
      # Allow up to 4 pods to be added at once
      maxPodsPerScale: 4
      
    # Scale down conservatively to maintain availability
    scaleDown:
      # Longer stabilization to avoid thrashing
      stabilizationWindowSeconds: 300
      # Conservative scale down for stability
      maxScaleDownPercent: 50
      # Limit pod removal rate
      maxPodsPerScale: 2
      
    # Minimum replicas for high availability
    minReplicas: 2
    # Maximum replicas to prevent resource exhaustion
    maxReplicas: 15
    
  # Health and monitoring settings
  health:
    # Enable auto-healing for failed containers
    autoHealing: true
    
    # Health check settings optimized for Node.js
    checks:
      # Liveness probe settings
      liveness:
        enabled: true
        path: "/health"
        port: 3000
        initialDelaySeconds: 30
        periodSeconds: 10
        timeoutSeconds: 5
        failureThreshold: 3
        
      # Readiness probe for traffic routing
      readiness:
        enabled: true
        path: "/health"
        port: 3000
        initialDelaySeconds: 5
        periodSeconds: 5
        timeoutSeconds: 3
        failureThreshold: 2
        
    # Resource monitoring
    monitoring:
      # Enable detailed metrics collection
      enabled: true
      # Monitor Node.js specific metrics
      nodeJsMetrics: true
      # Event loop lag monitoring
      eventLoopLag: true
      
  # Performance optimization settings
  performance:
    # Enable performance optimizations
    optimization: "enabled"
    
    # Node.js specific optimizations
    nodejs:
      # Optimize V8 flags for production
      v8Optimizations: true
      # Enable cluster mode if beneficial
      clusterMode: "auto"
      # Memory management settings
      maxOldSpaceSize: "auto"
      
    # Network optimizations for web applications
    network:
      # Enable keep-alive for better connection reuse
      keepAlive: true
      # Optimize for HTTP/1.1 and HTTP/2
      httpOptimizations: true
      
  # Cost optimization settings
  cost:
    # Enable cost optimization
    optimization: "enabled"
    
    # Resource right-sizing
    rightSizing:
      enabled: true
      # Continuous optimization
      continuous: true
      # Optimization frequency
      interval: "1h"
      
    # Spot instance preferences for non-critical workloads
    scheduling:
      # Prefer cost-effective nodes
      costOptimized: true
      # Allow spot instances for development
      spotInstances: false
      
  # Environment-specific settings
  environment:
    # Production environment optimizations
    type: "production"
    
    # SLA requirements
    sla:
      # Target availability
      availability: "99.9%"
      # Response time targets
      responseTime: "200ms"
      # Error rate threshold
      errorRate: "1%"